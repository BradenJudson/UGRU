ls
x=2
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("aphd")
install.packages("aphid")
install.packages(c("aphid", "backports", "broom", "checkmate", "clipr", "data.table", "dbplyr", "fs", "ggplot2", "igraph", "pillar", "processx", "progress", "RcppArmadillo", "rlang", "rvest", "segmented", "seqHMM", "sys", "tinytex", "xfun"))
install.packages("dplyr")
install.packages("blogdown")
library(blogdown)
blogdown::install_hugo()
library(blogdown)
source('~/bin/cnuge_web/readme.r')
blogdown:::serve_site()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
library(devtools)
has_devel()
#example of 'one liners' where its safer to break the explicit syntax rules in the name of style
#turn a DNA sequence into a lower case vector
s2v = function(dna_string) tolower(strsplit(dna_string, "")[[1]])
#turn a vector of DNA sequence into a string
v2s = function(dna_vec) paste(dna_vec, collapse = "")
#get a random DNA nucleotide
#the argument with a default lets this be
#used in solving two problems!
random_bp = function(exclude_base = NULL){
bps = c('a', 't', 'g', 'c')
if(!is.null(exclude_base)){
bps = bps[bps != exclude_base]
}
sample(bps, 1)
}
# a simplified version of a function to introduce errors into DNA sequences
error_introduce = function(dna_string, global_mutation_rate = 0.01, global_indel_rate = 0.01){
org_vec = s2v(dna_string)
new_seq = c()
for(i in 1:length(org_vec)){
b = org_vec[[i]]
prob = runif(1)
if(prob < global_mutation_rate){
#point mutation
new_b = random_bp(exclude_base=b)
new_seq = c(new_seq,new_b)
} else if ((global_mutation_rate < prob) && (prob<(global_indel_rate+global_mutation_rate))){
#indel
in_prob = runif(1)
if(in_prob<0.5){
#insertion
#add the base
new_seq = c(new_seq, b)
#insert a base after
new_seq = c(new_seq, random_bp())
}else{
#deletion
#don't add anything so base is skipped
#this 'else' statement could be omitted
next
}
}else{
new_seq = c(new_seq, b)
}
}
output = v2s(new_seq)
return(output)
}
#reusing the 'building blocks' I've made to easily do something else
random_add = function(seq, side = 3 , max = 100){
#side says where the addition is made
#1 = front
#2 = back
#3 = both
front_seq = c()
back_seq = c()
if(side == 1 || side == 3){
for(i in 1:sample.int(max, 1)){
front_seq = c(front_seq, random_bp())
}
}
if(side == 2 || side == 3){
for(i in 1:sample.int(max, 1)){
back_seq = c(back_seq, random_bp())
}
}
return(v2s(c(front_seq, seq, back_seq)))
}
test_func = function(){
return("I'm a function, just doing my thing.")
}
#call a function that takes no arguments
test_func() #the function is run on this line.
test_func = function(){
return("I'm a function, just doing my thing.")
}
#call a function that takes no arguments
test_func() #the function is run on this line.
test_func = function(){
return("I'm a function, just doing my thing.")
}
#call a function that takes no arguments
test_func() #the function is run on this line.
test_func = function(){
return("I'm a function, just doing my thing.")
}
#call a function that takes no arguments
test_func() #the function is run on this line.
y = test_func()
toupper(y)
test_maths = function(x){
output = x * 5
return(output)
}
test_maths()#need to pass an argument!
test_maths(25)
y = 7
test_maths(y)
print(paste("After the function call, the value of y is:", y))
y = 7
y = test_maths(y)
y
test_maths = function(x = 99){
output = x * 5
return(output)
}
test_maths()#no value passed for argument x, so it runs with the default.
algebra_ex = function(x, y){
print(paste("x is:", x))
print(paste("y is:", y))
output = x*(x+y)
return(output)
}
algebra_ex(x=6, y=7)
algebra_ex = function(longname_x, y){
print(paste("longname_x is:", longname_x))
print(paste("y is:", y))
output = longname_x*(longname_x+y)
return(output)
}
algebra_ex(y=7, l=6) #don't need to type all of longname_x
algebra_ex = function(longname_x, y){
print(paste("longname_x is:", longname_x))
print(paste("y is:", y))
output = longname_x*(longname_x+y)
return(output)
}
algebra_ex(y=7, l=6) #don't need to type all of longname_x
algebra_ex = function(longname_x, y){
print(paste("longname_x is:", longname_x))
print(paste("y is:", y))
output = longname_x*(longname_x+y)
return(output)
}
algebra_ex(y=7, 6) #don't need to type all of longname_x
#positional inference of arguments
lm(Sepal.Length~Sepal.Width , iris)
#abbreviation
lm(Sepal.Length~Sepal.Width , d = iris)
lm
maths = function(x, y){
z = x * y * y * 3
return(z)
}
maths(3, 6)
how_long_to_x = function(less_than = 5, range = 25, max = 20){
#for the given number of times
for(i in 1:max){
#get a random number
new_num = sample(1:range, 1)
#check if it is less than the cutoff
if(new_num < less_than){
return(paste("Found a number less than", less_than, "in", i, "iterations."))
}
}
return(paste("did not find a number less than", less_than, "over", max, "iterations."))
}
how_long_to_x()
how_long_to_x()
how_long_to_x()
how_long_to_x()
how_long_to_x()
math1 = function(x){
y=10
return(x * y)
}
#QUESTION: what will the following yield and why?
y = 12
math1(y)
# a: 144
# b: 100
# c: 120
# d: error
#this will work
x = 17
math2 = function(){
y=10
return(x * y)
}
math2()
nested_math = function(y){
x5 = y+3
return(x)
}
math3 = function(){
y = 10
z = nested_math(y)
return(x5 * y)
}
math3()
y = c(1,2,3,4,5,6)
#hidden call to y in this function
vector_math = function(x){
return(x*y)
}
in_dat = c(17, 38, 10)
out1 = vector_math(in_dat)
print(out1)
#say we did something else in our code and overwrite y
y = 7
#if we do not look inside of vector_math, we would assume
#this function should have the same result as when it was run above
out2 = vector_math(in_dat)
out2  # what is going on here?
out1 == out2
#Here I reinvent the wheel and write a function to take the mean of a vector
my_mean = function(x){
count = 0
total = 0
for(n in x){
count = count + 1
total = total + n
}
if(count == 0){
stop("Cannot take the mean of an empty vector!\n")
}else if(count == 1){
warning("Be aware this is the mean of a single number!\n")
}
return(total/count)
}
my_mean(c(3,6,9,10))
#if we later reuse this function, we can avoid all the detail contained within it
my_tri_mean = function(x){
mod = my_mean(x)
out = 3*mod
return(out)
}
my_tri_mean(c(3,6,9,10.5))
#Here I reinvent the wheel and write a function to take the mean of a vector
my_mean = function(x){
count = 0
total = 0
for(n in x){
count = count + 1
total = total + n
}
if(count == 0){
stop("Cannot take the mean of an empty vector!\n")
}else if(count == 1){
warning("Be aware this is the mean of a single number!\n")
}
return(total/count)
}
my_mean(c(3,6,9,10))
z = c()
my_tri_mean(z) #we hit the stop condition here and get an error
x = c(1)
my_tri_mean(x) #this only hits the warning condition, so the function executes but prints a warning of potential trouble
13 -> x
x
contributors()
demo()
setwd('bin/UGRU/')
getwd()
setwd('bin/UGRU/matt_snp_work')
setwd('~/bin/UGRU/matt_snp_work')
setwd('~/bin/UGRU/matt_snp_work')
library(patchwork)
library(janitor)
library(devtools)
library(skimr)
library(rsed)
install.packages(c("rsed", "sjPlot"))
##if packages not installed, uncomment & run preceeding line
#install.packages('patchwork')
library(patchwork)
#install.packages('janitor')
library(janitor)
#install.packages('devtools')
library(devtools)
#install.packages('skimr')
library(skimr)
#install.packages('rsed')
library(rsed)
#install.packages('data.table')
library(data.table)
#install.packages('sjPlot')
library(sjPlot)
install.packages('sjPlot')
theme_set(theme_bw())
?theme_set
?theme_bw
gff = read_tsv('ref_ASM291031v2_top_level.gff3',
## read in the Arctic charr genome data (gff file)
col_names = F,
skip = 9) %>%
## there are 9 garbage lines, need to get rid of them
rename(chr = X1,
## Need to rename the columns to something informative
source = X2,
feature = X3,
start = X4,
end = X5,
score = X6,
strand = X7,
frame = X8,
attribute = X9) %>%
filter(feature == 'gene') %>%
## only want the coding gene regions
arrange(start,
end) %>%
## arrange each gene by its start and end points on each chromosome
mutate(mid = start + (end-start)/2)
#install.packages('tidyverse')
library(tidyverse)
theme_set(theme_bw())
gff = read_tsv('ref_ASM291031v2_top_level.gff3',
## read in the Arctic charr genome data (gff file)
col_names = F,
skip = 9) %>%
## there are 9 garbage lines, need to get rid of them
rename(chr = X1,
## Need to rename the columns to something informative
source = X2,
feature = X3,
start = X4,
end = X5,
score = X6,
strand = X7,
frame = X8,
attribute = X9) %>%
filter(feature == 'gene') %>%
## only want the coding gene regions
arrange(start,
end) %>%
## arrange each gene by its start and end points on each chromosome
mutate(mid = start + (end-start)/2)
# Our SNP data ------------------------------------------------------------
data = read_tsv('PCAdapt_lake_outliers.txt') %>%
## read in the dataframe of outlier loci within the population
arrange(CHROME3) %>%
## Arrange the df by chromosome number
filter(CHROME3 != 'Contigs')
AC08 = gff %>%
filter(chr == 'NC_036848.1')
AC08_out = data %>%
filter(CHROME3 == 'AC08')
AC08_out
pos = AC08_out$PDIST.x
gene_regions = AC08 %>%
mutate(hit_dist = abs(mid - pos)) %>%
## find the distance between the mid point and the snp position
arrange(hit_dist) %>%
## arrange by hit distance
filter(hit_dist <5000) %>%
## lets find genes within 5kb of our snps
select(chr,
start,
end,
attribute,
hit_dist) %>%
## select the data that we need
pull(attribute)
install.packages(lintr)
install.packages('lintr')
lintr::lint("Code_review_CandGenes.R")
